<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VOE - Admin Dashboard</title>
    <link href="../dashBoard/css/style.css" rel="stylesheet">
    <style>
        /* Estilo básico para centralizar o formulário */
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f7f7f7;
        }

        .card {
            max-width: 700px;
            width: 100%;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .choices .choice {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .choice input[type="radio"] {
            margin-right: 10px;
        }
    </style>
</head>

<body>
    <div class="card">
        <div class="card-header">
            <h4 class="card-title">Criar Avaliação</h4>
        </div>
        <div class="card-body">
            <form id="questionsForm">
                <div class="form-group">
                    <input class="form-control" type="text" name="titulo" placeholder="Título da Avaliação" required>
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="descricao" placeholder="Descrição" required></textarea>
                </div>
                <div class="form-group">
                    <select class="form-control" name="vagaId" required>
                        <option value="">Selecione uma vaga</option>
                        <% vagas.forEach((vaga) => { %>
                        <option value="<%= vaga.id %>"><%= vaga.cargo %></option>
                        <% }); %>
                    </select>
                </div>

                <div id="questionsContainer">
                    <!-- Pergunta inicial -->
                    <div class="question mb-4">
                        <div class="form-group">
                            <label>Pergunta:</label>
                            <textarea class="form-control question_text" name="perguntas[0][texto]" required></textarea>
                        </div>
                        <div class="form-group">
                            <label>Tipo de Pergunta:</label>
                            <select class="form-control question_type" name="perguntas[0][tipo]" required>
                                <option value="open">Aberta</option>
                                <option value="multiple_choice">Múltipla Escolha</option>
                            </select>
                        </div>

                        <div class="choicesContainer form-group" style="display: none;">
                            <label>Opções de Resposta:</label>
                            <div class="choices"></div>
                            <button type="button" class="btn btn-secondary addChoice">Adicionar Opção</button>
                        </div>

                        <button type="button" class="btn btn-danger removeQuestion">Remover Pergunta</button>
                    </div>
                </div>

                <button type="button" id="addQuestion" class="btn btn-primary">Adicionar Pergunta</button>
                <button type="submit" class="btn btn-outline-dark">Criar Avaliação</button>
            </form>
        </div>
    </div>

    <script>
        let questionIndex = 1; // Começa com 1 porque já existe uma pergunta inicial

        // Função para adicionar uma nova pergunta
        document.getElementById('addQuestion').addEventListener('click', addQuestionForm);

        // Função para adicionar a estrutura de um formulário de pergunta
        function addQuestionForm() {
            const questionDiv = document.createElement('div');
            questionDiv.classList.add('question', 'mb-4');
            questionDiv.innerHTML = `
                <div class="form-group">
                    <label>Pergunta:</label>
                    <textarea class="form-control question_text" name="perguntas[${questionIndex}][texto]" required></textarea>
                </div>
                <div class="form-group">
                    <label>Tipo de Pergunta:</label>
                    <select class="form-control question_type" name="perguntas[${questionIndex}][tipo]" required>
                        <option value="open">Aberta</option>
                        <option value="multiple_choice">Múltipla Escolha</option>
                    </select>
                </div>
                <div class="choicesContainer form-group" style="display: none;">
                    <label>Opções de Resposta:</label>
                    <div class="choices"></div>
                    <button type="button" class="btn btn-secondary addChoice">Adicionar Opção</button>
                </div>
                <button type="button" class="btn btn-danger removeQuestion">Remover Pergunta</button>
            `;

            document.getElementById('questionsContainer').appendChild(questionDiv);
            setupQuestionEvents(questionDiv);
            questionIndex++;
        }

        // Configura eventos para as perguntas
        function setupQuestionEvents(questionDiv) {
            const typeSelect = questionDiv.querySelector('.question_type');
            const choicesContainer = questionDiv.querySelector('.choicesContainer');

            typeSelect.addEventListener('change', function () {
                choicesContainer.style.display = this.value === 'multiple_choice' ? 'block' : 'none';
            });

            const addChoiceButton = questionDiv.querySelector('.addChoice');
            addChoiceButton.addEventListener('click', function () {
                addChoiceOption(questionDiv);
            });

            questionDiv.querySelector('.removeQuestion').addEventListener('click', function () {
                questionDiv.remove();
            });
        }

        function addChoiceOption(questionDiv) {
            const choiceDiv = document.createElement('div');
            choiceDiv.classList.add('choice');
            choiceDiv.innerHTML = `
                <input type="radio" class="correct_choice" name="perguntas[${questionIndex}][resposta_correta]" required>
                <input type="text" class="form-control choice_text" name="perguntas[${questionIndex}][opcoes][]" placeholder="Opção" required>
                <button type="button" class="btn btn-danger removeChoice">Remover</button>
            `;
            questionDiv.querySelector('.choices').appendChild(choiceDiv);

            choiceDiv.querySelector('.removeChoice').addEventListener('click', function () {
                choiceDiv.remove();
            });
        }

        // Configura eventos para a pergunta inicial
        setupQuestionEvents(document.querySelector('.question'));

        // Envio do formulário em formato JSON
        document.getElementById('questionsForm').addEventListener('submit', async (e) => {
            e.preventDefault(); // Impede o envio padrão do formulário

            const formData = new FormData(e.target);
            const data = {
                titulo: formData.get('titulo'),
                descricao: formData.get('descricao'),
                vagaId: formData.get('vagaId'),
                perguntas: []
            };

            // Captura as perguntas
const questions = document.querySelectorAll('.question');
questions.forEach((questionGroup) => {
    const questionText = questionGroup.querySelector('textarea[name^="perguntas"][name*="texto"]');
    const questionType = questionGroup.querySelector('select[name^="perguntas"][name*="tipo"]');
    const options = Array.from(questionGroup.querySelectorAll('input[name^="perguntas"][name*="opcoes"]'));

    // Verifique se os elementos foram encontrados
    if (questionText && questionType) {
        data.perguntas.push({
            texto: questionText.value,
            tipo: questionType.value,
            opcoes: options.map(input => input.value)
        });
    }
});

            console.log('Dados do formulário:', data); // Para ver os dados no console

            try {
                const response = await fetch('/admin/avaliacao/criar', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                console.log('Resposta da requisição:', response); // Para ver a resposta no console

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('Erro:', errorData.error);
                    // Aqui você pode mostrar um alerta ou mensagem de erro para o usuário
                } else {
                    const responseData = await response.json();
                    console.log('Avaliação criada com sucesso:', responseData);
                    // Aqui você pode redirecionar o usuário ou mostrar uma mensagem de sucesso
                }
            } catch (error) {
                console.error('Erro de rede:', error);
                // Aqui você pode mostrar um alerta ou mensagem de erro para o usuário
            }
        });
    </script>

</body>

</html>
